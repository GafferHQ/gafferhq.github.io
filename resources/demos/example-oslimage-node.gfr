import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 54, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 1, persistent=False )

__children = {}

__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"] = GafferOSL.OSLCode( "OSLCode" )
parent.addChild( __children["OSLCode"] )
__children["OSLCode"]["out"].addChild( Gaffer.Color3fPlug( "output1", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Erode"] = GafferImage.Erode( "Erode" )
parent.addChild( __children["Erode"] )
__children["Erode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ImageReader2"] = GafferImage.ImageReader( "ImageReader2" )
parent.addChild( __children["ImageReader2"] )
__children["ImageReader2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLImage3"] = GafferOSL.OSLImage( "OSLImage3" )
parent.addChild( __children["OSLImage3"] )
__children["OSLImage3"]["channels"].addChild( Gaffer.NameValuePlug( "customChannel", Gaffer.FloatPlug( "value", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Noise"] = GafferOSL.OSLShader( "Noise" )
parent.addChild( __children["Noise"] )
__children["Noise"].loadShader( "Pattern/Noise" )
__children["Noise"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"] = Gaffer.Backdrop( "Backdrop" )
parent.addChild( __children["Backdrop"] )
__children["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound2", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLImage1"] = GafferOSL.OSLImage( "OSLImage1" )
parent.addChild( __children["OSLImage1"] )
__children["OSLImage1"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ImageReader"] = GafferImage.ImageReader( "ImageReader" )
parent.addChild( __children["ImageReader"] )
__children["ImageReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InLayer"] = GafferOSL.OSLShader( "InLayer" )
parent.addChild( __children["InLayer"] )
__children["InLayer"].loadShader( "ImageProcessing/InLayer" )
__children["InLayer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PowFloatR"] = GafferOSL.OSLShader( "PowFloatR" )
parent.addChild( __children["PowFloatR"] )
__children["PowFloatR"].loadShader( "Maths/PowFloat" )
__children["PowFloatR"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ColorToFloat"] = GafferOSL.OSLShader( "ColorToFloat" )
parent.addChild( __children["ColorToFloat"] )
__children["ColorToFloat"].loadShader( "Conversion/ColorToFloat" )
__children["ColorToFloat"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FloatToColor"] = GafferOSL.OSLShader( "FloatToColor" )
parent.addChild( __children["FloatToColor"] )
__children["FloatToColor"].loadShader( "Conversion/FloatToColor" )
__children["FloatToColor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PowFloatG"] = GafferOSL.OSLShader( "PowFloatG" )
parent.addChild( __children["PowFloatG"] )
__children["PowFloatG"].loadShader( "Maths/PowFloat" )
__children["PowFloatG"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PowFloatB"] = GafferOSL.OSLShader( "PowFloatB" )
parent.addChild( __children["PowFloatB"] )
__children["PowFloatB"].loadShader( "Maths/PowFloat" )
__children["PowFloatB"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"] = Gaffer.Expression( "Expression1" )
parent.addChild( __children["Expression1"] )
__children["Expression1"]["__out"].addChild( Gaffer.FloatPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__out"].addChild( Gaffer.FloatPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__out"].addChild( Gaffer.FloatPlug( "p2", direction = Gaffer.Plug.Direction.Out, defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop9"] = Gaffer.Backdrop( "Backdrop9" )
parent.addChild( __children["Backdrop9"] )
__children["Backdrop9"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop9"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop1"] = Gaffer.Backdrop( "Backdrop1" )
parent.addChild( __children["Backdrop1"] )
__children["Backdrop1"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop1"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop10"] = Gaffer.Backdrop( "Backdrop10" )
parent.addChild( __children["Backdrop10"] )
__children["Backdrop10"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop10"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"] = Gaffer.Backdrop( "Backdrop2" )
parent.addChild( __children["Backdrop2"] )
__children["Backdrop2"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"].addChild( Gaffer.Box2fPlug( "__uiBound2", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop6"] = Gaffer.Backdrop( "Backdrop6" )
parent.addChild( __children["Backdrop6"] )
__children["Backdrop6"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop6"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop6"].addChild( Gaffer.Box2fPlug( "__uiBound2", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop6"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"] = Gaffer.Backdrop( "Backdrop5" )
parent.addChild( __children["Backdrop5"] )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound2", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound3", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound4", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop12"] = Gaffer.Backdrop( "Backdrop12" )
parent.addChild( __children["Backdrop12"] )
__children["Backdrop12"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop12"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop8"] = Gaffer.Backdrop( "Backdrop8" )
parent.addChild( __children["Backdrop8"] )
__children["Backdrop8"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop8"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop8"].addChild( Gaffer.Box2fPlug( "__uiBound2", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop8"].addChild( Gaffer.Box2fPlug( "__uiBound3", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop8"].addChild( Gaffer.Box2fPlug( "__uiBound4", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop8"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop13"] = Gaffer.Backdrop( "Backdrop13" )
parent.addChild( __children["Backdrop13"] )
__children["Backdrop13"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop13"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop13"].addChild( Gaffer.Box2fPlug( "__uiBound2", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop13"].addChild( Gaffer.Box2fPlug( "__uiBound3", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop13"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["OSLCode"]["out"]["output1"] )
__children["OSLImage"]["channels"]["channel"]["value"]["r"].setInput( __children["OSLCode"]["out"]["output1"]["r"] )
__children["OSLImage"]["channels"]["channel"]["value"]["g"].setInput( __children["OSLCode"]["out"]["output1"]["g"] )
__children["OSLImage"]["channels"]["channel"]["value"]["b"].setInput( __children["OSLCode"]["out"]["output1"]["b"] )
__children["OSLImage"]["__defaultIn"].setInput( __children["OSLImage"]["__defaultConstant"]["out"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( 39.824852, 80.7202454 ) )
__children["OSLCode"]["code"].setValue( 'vector complexMult( vector a, vector b )\n{\n\treturn vector( a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0], 0 );\n}\n\n\nvector offset = (vector( u, v, 0 ) + vector( -0.75, -0.5, 0 )) * 2.5;\nvector q = 0;\n\nfor( int i = 0; i < 11; i++ )\n{\n\tq = complexMult( q, q ) + offset;\n\tif( dot( q, q ) > 4 )\n\t{\n\t\tq = 2 * normalize( q );\n\t}\n}\n\noutput1 = color( q[0], q[1], 0 );' )
__children["OSLCode"]["__uiPosition"].setValue( imath.V2f( 26.3609428, 81.3202667 ) )
__children["Erode"]["in"].setInput( __children["OSLImage3"]["out"] )
__children["Erode"]["radius"]["x"].setValue( 24 )
__children["Erode"]["radius"]["y"].setInput( __children["Erode"]["radius"]["x"] )
__children["Erode"]["boundingMode"].setValue( 1 )
__children["Erode"]["masterChannel"].setValue( 'noiseChannel' )
__children["Erode"]["__uiPosition"].setValue( imath.V2f( 37.7274399, 8.75032043 ) )
__children["ImageReader2"]["fileName"].setValue( '${GAFFER_ROOT}/resources/hdri/studio.exr' )
__children["ImageReader2"]["refreshCount"].setValue( 8 )
__children["ImageReader2"]["__uiPosition"].setValue( imath.V2f( 37.7274399, 20.0784454 ) )
__children["OSLImage3"]["in"].setInput( __children["ImageReader2"]["out"] )
__children["OSLImage3"]["channels"]["channel"]["name"].setValue( 'noiseChannel' )
__children["OSLImage3"]["channels"]["channel"]["value"].setInput( __children["Noise"]["out"]["n"] )
__children["OSLImage3"]["__defaultIn"].setInput( __children["OSLImage3"]["__defaultConstant"]["out"] )
__children["OSLImage3"]["__uiPosition"].setValue( imath.V2f( 37.7274399, 14.4143829 ) )
__children["Noise"]["parameters"]["type"].setValue( 'usimplex' )
__children["Noise"]["parameters"]["scale"].setValue( 8.0 )
__children["Noise"]["parameters"]["dimensions"].setValue( 4 )
__children["Noise"]["__uiPosition"].setValue( imath.V2f( 25.2274456, 15.0143814 ) )
__children["Backdrop"]["title"].setValue( 'Example: OSLImage Node Basics' )
__children["Backdrop"]["scale"].setValue( 1.5 )
__children["Backdrop"]["description"].setValue( 'This example contains 3 basic OSL networks that show the OSLImage node in use.\n\nWhen manipulating an existing image, image layer, or channel, the OSL network must read it via an InLayer node. Then, it must be written back to the OSLImage node, as the same layer/channel, or a new one.' )
__children["Backdrop"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 60, 37.7212219 ) ) )
__children["Backdrop"]["__uiPosition"].setValue( imath.V2f( -29.7396507, 92.6728821 ) )
__children["OSLImage1"]["in"].setInput( __children["ImageReader"]["out"] )
__children["OSLImage1"]["channels"]["channel"]["value"].setInput( __children["FloatToColor"]["out"]["c"] )
__children["OSLImage1"]["channels"]["channel"]["value"]["r"].setInput( __children["FloatToColor"]["out"]["c"]["r"] )
__children["OSLImage1"]["channels"]["channel"]["value"]["g"].setInput( __children["FloatToColor"]["out"]["c"]["g"] )
__children["OSLImage1"]["channels"]["channel"]["value"]["b"].setInput( __children["FloatToColor"]["out"]["c"]["b"] )
__children["OSLImage1"]["__defaultIn"].setInput( __children["OSLImage1"]["__defaultConstant"]["out"] )
__children["OSLImage1"]["__uiPosition"].setValue( imath.V2f( 103.711998, 41.905201 ) )
__children["ImageReader"]["fileName"].setValue( '${GAFFER_ROOT}/resources/hdri/studio.exr' )
__children["ImageReader"]["__uiPosition"].setValue( imath.V2f( 103.711998, 50.0693016 ) )
__children["InLayer"]["__uiPosition"].setValue( imath.V2f( 33.581398, 43.1051483 ) )
__children["PowFloatR"]["parameters"]["base"].setInput( __children["ColorToFloat"]["out"]["r"] )
__children["PowFloatR"]["parameters"]["power"].setInput( __children["Expression1"]["__out"]["p1"] )
__children["PowFloatR"]["__uiPosition"].setValue( imath.V2f( 75.8270035, 48.6692352 ) )
__children["ColorToFloat"]["parameters"]["c"].setInput( __children["InLayer"]["out"]["layerColor"] )
__children["ColorToFloat"]["parameters"]["c"]["r"].setInput( __children["InLayer"]["out"]["layerColor"]["r"] )
__children["ColorToFloat"]["parameters"]["c"]["g"].setInput( __children["InLayer"]["out"]["layerColor"]["g"] )
__children["ColorToFloat"]["parameters"]["c"]["b"].setInput( __children["InLayer"]["out"]["layerColor"]["b"] )
__children["ColorToFloat"]["__uiPosition"].setValue( imath.V2f( 62.4065933, 43.1051483 ) )
__children["FloatToColor"]["parameters"]["r"].setInput( __children["PowFloatR"]["out"]["out"] )
__children["FloatToColor"]["parameters"]["g"].setInput( __children["PowFloatG"]["out"]["out"] )
__children["FloatToColor"]["parameters"]["b"].setInput( __children["PowFloatB"]["out"]["out"] )
__children["FloatToColor"]["__uiPosition"].setValue( imath.V2f( 89.2364273, 42.5052109 ) )
__children["PowFloatG"]["parameters"]["base"].setInput( __children["ColorToFloat"]["out"]["g"] )
__children["PowFloatG"]["parameters"]["power"].setInput( __children["Expression1"]["__out"]["p0"] )
__children["PowFloatG"]["__uiPosition"].setValue( imath.V2f( 75.8269806, 42.5051727 ) )
__children["PowFloatB"]["parameters"]["base"].setInput( __children["ColorToFloat"]["out"]["b"] )
__children["PowFloatB"]["parameters"]["power"].setInput( __children["Expression1"]["__out"]["p2"] )
__children["PowFloatB"]["__uiPosition"].setValue( imath.V2f( 75.8267593, 36.3411102 ) )
__children["Expression1"]["__uiPosition"].setValue( imath.V2f( 66.4034348, 38.2051468 ) )
__children["Backdrop9"]["title"].setValue( '' )
__children["Backdrop9"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 21.944458, -14.4422302 ), imath.V2f( 104.709366, 8.29750061 ) ) )
__children["Backdrop9"]["__uiPosition"].setValue( imath.V2f( -51.8815079, 81.7140427 ) )
__children["Backdrop1"]["title"].setValue( 'Image #1: Fractal pattern' )
__children["Backdrop1"]["description"].setValue( 'This first image is the simplest setup, consisting of a procedurally-generated pattern similar to a Mandelbrot fractal.\n\nAn OSLCode node generates the pattern, and feeds it into the OSLImage node through the default RGB layer.' )
__children["Backdrop1"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 20 ) ) )
__children["Backdrop1"]["__uiPosition"].setValue( imath.V2f( -29.8379059, 69.9789581 ) )
__children["Backdrop10"]["title"].setValue( '' )
__children["Backdrop10"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 17.4896965, -26.0638962 ), imath.V2f( 205.510223, 7.9475975 ) ) )
__children["Backdrop10"]["__uiPosition"].setValue( imath.V2f( -47.4339066, 57.284565 ) )
__children["Backdrop2"]["title"].setValue( 'Image #2: Color manipulation' )
__children["Backdrop2"]["description"].setValue( "This network corrects the gamma of an image by separately manipulating each color channel.\n\nAn ImageReader node provides the source image. To read the image's pixel data, the OSL network uses an InLayer node. The layer's channels are then split and corrected individually, before being driven back to the OSLImage node.\n\nYou should note that this network is redundant for real-world purposes, as the Grade node provides the same function." )
__children["Backdrop2"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 30 ) ) )
__children["Backdrop2"]["__uiPosition"].setValue( imath.V2f( -29.8814049, 35.1501045 ) )
Gaffer.Metadata.registerValue( __children["Backdrop6"], 'nodeGadget:color', imath.Color3f( 0.347949386, 0.438627928, 0.5 ) )
__children["Backdrop6"]["title"].setValue( 'Note: InLayer node and EXRs' )
__children["Backdrop6"]["description"].setValue( 'The concept of image layers does not exist in the EXR image format. Therefore, when manipulating an EXR, we leave the layer name in InLayer node blank. This defaults to reading the "main" layer of the image - which is just the "R", "G", and "B" channels of the EXR.' )
__children["Backdrop6"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 33.9190483 ) ) )
__children["Backdrop6"]["__uiPosition"].setValue( imath.V2f( 12.7244682, 31.2939186 ) )
__children["Backdrop5"]["title"].setValue( 'Writing layers with the OSLImage node' )
__children["Backdrop5"]["description"].setValue( "In order to write out the resulting pixel data of your OSL network, you must define a layer or channel on the OSLImage node itself, as a new plug.\n\nTo add a layer/channel to write, click + in the Node Editor, then select a standard or custom layer/channel. A new plug will appear on the OSLObject node. If you're writing to an existing custom channel/layer, you will need to give it the correct custom name.\n\nAfter you've defined the layer plug, connect the OSL network to it in the node graph." )
__children["Backdrop5"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0.774528503 ), imath.V2f( 40, 32.5429764 ) ) )
__children["Backdrop5"]["__uiPosition"].setValue( imath.V2f( 114.066002, 32.5737 ) )
__children["Backdrop12"]["title"].setValue( '' )
__children["Backdrop12"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -88.9776306, -3.61414337 ), imath.V2f( -7.69220352, 26.4979591 ) ) )
__children["Backdrop12"]["__uiPosition"].setValue( imath.V2f( 59.1040344, 2.66755676 ) )
__children["Backdrop8"]["title"].setValue( 'Image #3: Generating new channels' )
__children["Backdrop8"]["description"].setValue( 'This network creates mosaic-like tiles out of an image.\n\nThis time, instead of manipulating the image directly, the OSL network creates a separate channel, called "noiseChannel". The downstream Erode node then reads that channel, and erodes the entire image based on the channel\'s pattern.\n\nAdding procedural layers in OSL like this can be a very effective method to manipulate and distort images.' )
__children["Backdrop8"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 29.6719799 ) ) )
__children["Backdrop8"]["__uiPosition"].setValue( imath.V2f( -28.4113579, -0.540668488 ) )
Gaffer.Metadata.registerValue( __children["Backdrop13"], 'nodeGadget:color', imath.Color3f( 0.300000012, 0.5, 0.460500002 ) )
__children["Backdrop13"]["title"].setValue( 'Tip: Viewing channels and layers' )
__children["Backdrop13"]["description"].setValue( 'To view the "noiseChannel" channel in the Viewer, click the drop-down list at the top-left of the Viewer ("RGBA" will be selected by default), then select "noiseChannel". Just remember to switch back to "RGBA" when you want to view the full image.' )
__children["Backdrop13"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 30.04986 ) ) )
__children["Backdrop13"]["__uiPosition"].setValue( imath.V2f( 51.4114532, -0.884363174 ) )
__children["Expression1"]["__engine"].setValue( 'python' )
__children["Expression1"]["__expression"].setValue( 'power = .8\nparent["__out"]["p1"] = power\nparent["__out"]["p0"] = power\nparent["__out"]["p2"] = power\n' )


del __children

