import Gaffer
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 54, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 1, persistent=False )

__children = {}

__children["SceneReader"] = GafferScene.SceneReader( "SceneReader" )
parent.addChild( __children["SceneReader"] )
__children["SceneReader"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLObject"] = GafferOSL.OSLObject( "OSLObject" )
parent.addChild( __children["OSLObject"] )
__children["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "P", Gaffer.V3fPlug( "value", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Point ), True, "primitiveVariable1", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"].addChild( Gaffer.BoolPlug( "__uiOutputConnectionsMinimised", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InPoint"] = GafferOSL.OSLShader( "InPoint" )
parent.addChild( __children["InPoint"] )
__children["InPoint"].loadShader( "ObjectProcessing/InPoint" )
__children["InPoint"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["AddVector"] = GafferOSL.OSLShader( "AddVector" )
parent.addChild( __children["AddVector"] )
__children["AddVector"].loadShader( "Maths/AddVector" )
__children["AddVector"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"] = Gaffer.Backdrop( "Backdrop2" )
parent.addChild( __children["Backdrop2"] )
__children["Backdrop2"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"] = Gaffer.Backdrop( "Backdrop" )
parent.addChild( __children["Backdrop"] )
__children["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop4"] = Gaffer.Backdrop( "Backdrop4" )
parent.addChild( __children["Backdrop4"] )
__children["Backdrop4"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop4"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop4"].addChild( Gaffer.Box2fPlug( "__uiBound2", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop4"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"] = Gaffer.Backdrop( "Backdrop5" )
parent.addChild( __children["Backdrop5"] )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound1", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.Box2fPlug( "__uiBound2", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop5"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop6"] = Gaffer.Backdrop( "Backdrop6" )
parent.addChild( __children["Backdrop6"] )
__children["Backdrop6"].addChild( Gaffer.Box2fPlug( "__uiBound", defaultValue = imath.Box2f( imath.V2f( -10, -10 ), imath.V2f( 10, 10 ) ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Backdrop6"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Noise"] = GafferOSL.OSLShader( "Noise" )
parent.addChild( __children["Noise"] )
__children["Noise"].loadShader( "Pattern/Noise" )
__children["Noise"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["SceneReader"]["fileName"].setValue( '${GAFFER_ROOT}/resources/gafferBot/caches/gafferBot.scc' )
__children["SceneReader"]["__uiPosition"].setValue( imath.V2f( 12.1011934, 118.331932 ) )
__children["OSLObject"]["in"].setInput( __children["SceneReader"]["out"] )
__children["OSLObject"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["OSLObject"]["__contextCompatibility"].setValue( False )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable1"]["value"].setInput( __children["AddVector"]["out"]["out"] )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable1"]["value"]["x"].setInput( __children["AddVector"]["out"]["out"]["x"] )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable1"]["value"]["y"].setInput( __children["AddVector"]["out"]["out"]["y"] )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable1"]["value"]["z"].setInput( __children["AddVector"]["out"]["out"]["z"] )
__children["OSLObject"]["__uiPosition"].setValue( imath.V2f( 12.1011934, 110.16787 ) )
__children["PathFilter"]["paths"].setValue( IECore.StringVectorData( [ '/GAFFERBOT/...' ] ) )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 25.0206528, 118.148727 ) )
__children["InPoint"]["__uiPosition"].setValue( imath.V2f( -42.1020699, 111.367867 ) )
__children["AddVector"]["parameters"]["a"].setInput( __children["InPoint"]["out"]["value"] )
__children["AddVector"]["parameters"]["a"]["x"].setInput( __children["InPoint"]["out"]["value"]["x"] )
__children["AddVector"]["parameters"]["a"]["y"].setInput( __children["InPoint"]["out"]["value"]["y"] )
__children["AddVector"]["parameters"]["a"]["z"].setInput( __children["InPoint"]["out"]["value"]["z"] )
__children["AddVector"]["parameters"]["b"]["x"].setInput( __children["Noise"]["out"]["n"] )
__children["AddVector"]["parameters"]["b"]["y"].setInput( __children["Noise"]["out"]["n"] )
__children["AddVector"]["parameters"]["b"]["z"].setInput( __children["Noise"]["out"]["n"] )
__children["AddVector"]["__uiPosition"].setValue( imath.V2f( -1.82190609, 110.767868 ) )
__children["Backdrop2"]["title"].setValue( '' )
__children["Backdrop2"]["__uiBound"].setValue( imath.Box2f( imath.V2f( -10, -29.6120834 ), imath.V2f( 138.694229, 2.80075073 ) ) )
__children["Backdrop2"]["__uiPosition"].setValue( imath.V2f( -54.2990265, 129.277283 ) )
__children["Backdrop"]["title"].setValue( 'Example: OSLObject Node Basics' )
__children["Backdrop"]["scale"].setValue( 1.5 )
__children["Backdrop"]["description"].setValue( 'This example contains a very basic OSL network that adds noise deformation to a mesh by altering its `P` primvar.\n\nWithin the OSL network itself, we both read and write to the same primvar. As such, we read it in, manipulate it, then write it back to the source mesh as `P`, as a `points` type.\n\nIn OSL networks, you are not limited to using the same primvar as the input and output. You could read in one and write back to another. Or, you could write a new one from scratch.' )
__children["Backdrop"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 60, 37.7212219 ) ) )
__children["Backdrop"]["__uiPosition"].setValue( imath.V2f( -64.196991, 133.736664 ) )
__children["Backdrop4"]["title"].setValue( 'Reading primvars in OSL' )
__children["Backdrop4"]["description"].setValue( 'In order to read a primvar in an OSL network, you need an In[type] node that reads the correct primvar type. In this network, we read `P` via an InPoint node, since `P` is a `points` primvar type.' )
__children["Backdrop4"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 2.56304169 ), imath.V2f( 40, 31.9086761 ) ) )
__children["Backdrop4"]["__uiPosition"].setValue( imath.V2f( -64.1204071, 99.9412231 ) )
__children["Backdrop5"]["title"].setValue( 'Writing primvars with the OSLObject node' )
__children["Backdrop5"]["description"].setValue( "In order to write or overwrite a primvar, you must define the primvar on the OSLObject node itself, as a new plug. You will need to ensure that both the plug name and type match those of the source primvar.\n\nTo add a primvar to write, click + in the Node Editor, then select Standard > [primvar type]. A new plug will appear on the OSLObject node. The name you give the plug can be an existing primvar or a new one. If you're overwriting an existing primvar, the name must match exactly (case included!), or the node will merely create a new primvar with that name.\n\nAfter you've defined the primvar plug on the OSLObject node itself, connect the OSL network to the plug in the node graph." )
__children["Backdrop5"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0.774528503 ), imath.V2f( 40, 31.9086761 ) ) )
__children["Backdrop5"]["__uiPosition"].setValue( imath.V2f( 37.917347, 99.6981201 ) )
Gaffer.Metadata.registerValue( __children["Backdrop6"], 'nodeGadget:color', imath.Color3f( 0.300000012, 0.5, 0.460500002 ) )
__children["Backdrop6"]["title"].setValue( 'Tip: Primitive Inspector' )
__children["Backdrop6"]["description"].setValue( "If you're not sure the name or the spelling of the input privmar, or if you'd like to examine the values of the primvar before and after you modify it, you can use the Primitive Inspector to see all primvars and their values on a location in the scene.\n\nIn the default layout, the Primitive Inspector is in the same panel as the Graph Editor, to the right of the Animation Editor.\n\nJust make sure to select a scene location (using the Viewer or the Scene Hierarchy) that actually has an object with primvars. Typically, non-leaf locations do not have objects." )
__children["Backdrop6"]["__uiBound"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 40, 26.3712234 ) ) )
__children["Backdrop6"]["__uiPosition"].setValue( imath.V2f( -64.2785187, 71.7507858 ) )
__children["Noise"]["parameters"]["type"].setValue( 'perlin' )
__children["Noise"]["parameters"]["scale"].setValue( 5.0 )
__children["Noise"]["parameters"]["p"].setInput( __children["InPoint"]["out"]["value"] )
__children["Noise"]["parameters"]["p"]["x"].setInput( __children["InPoint"]["out"]["value"]["x"] )
__children["Noise"]["parameters"]["p"]["y"].setInput( __children["InPoint"]["out"]["value"]["y"] )
__children["Noise"]["parameters"]["p"]["z"].setInput( __children["InPoint"]["out"]["value"]["z"] )
__children["Noise"]["__uiPosition"].setValue( imath.V2f( -22.6102848, 106.167862 ) )


del __children

